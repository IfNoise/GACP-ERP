#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ SOP —Ñ–∞–π–ª–∞—Ö
–ó–∞–º–µ–Ω—è–µ—Ç [URS-XXX-001, FS-XXX-001] –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
"""

import re
from pathlib import Path

# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
FILES = [
    "SOP_Packaging.md",
    "SOP_IrrigationFertilization.md",
    "SOP_RawMaterialReception.md",
    "SOP_InventoryManagement.md",
    "SOP_CleaningSanitation.md",
    "SOP_DryingCuring.md",
    "SOP_Transplantation.md",
    "SOP_Disinfection.md",
    "SOP_Labeling.md",
    "SOP_Storage.md",
]

# –°—Ç–∞—Ä—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞
OLD_PATTERN = r"- \[URS-XXX-001, FS-XXX-001\]\n- \[–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\]"

# –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã
NEW_TEXT = """### Validation Documents

- [User Requirements Specification (URS)](../validation/URS.md)
- [Functional Specification (FS)](../validation/FS.md)
- [Design Specification (DS)](../validation/DS.md)
- [Traceability Matrix](../validation/TraceabilityMatrix.md)

### Regulatory Documents

- [WHO GACP](../compliance/WHO_GACP.md)
- [EU GMP Annex 11](../compliance/EU_GMP_Annex11.md)
- [ALCOA+ Principles](../compliance/ALCOA+.md)"""

# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É Last Modified
DATE_PATTERN = r"(Last Modified:)\s*\d{4}-\d{2}-\d{2}"
NEW_DATE = r"\1 2025-10-16"

def process_file(file_path: Path) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω —Ñ–∞–π–ª"""
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        content = file_path.read_text(encoding='utf-8')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        if not re.search(OLD_PATTERN, content):
            print(f"  ‚ö†Ô∏è  –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {file_path.name}")
            return False
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        new_content = re.sub(OLD_PATTERN, NEW_TEXT, content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É
        new_content = re.sub(DATE_PATTERN, NEW_DATE, new_content)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        file_path.write_text(new_content, encoding='utf-8')
        
        print(f"  ‚úÖ {file_path.name} - –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path.name}: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ SOP —Ñ–∞–π–ª–∞—Ö...\n")
    
    base_path = Path("/home/noise83/Projects/GACP-ERP/docs/sop")
    
    processed = 0
    skipped = 0
    errors = 0
    
    for filename in FILES:
        file_path = base_path / filename
        
        if not file_path.exists():
            print(f"  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
            skipped += 1
            continue
        
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞: {filename}")
        if process_file(file_path):
            processed += 1
        else:
            errors += 1
    
    print(f"\n" + "="*50)
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
    print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {errors}")
    print(f"üéâ –ì–æ—Ç–æ–≤–æ!")

if __name__ == "__main__":
    main()
